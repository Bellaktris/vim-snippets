###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
# define ${1:SYMBOL} ${2:value}
#endif  // ifndef $1
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {
  ${VISUAL}$0
  return 0;
}
endsnippet

snippet #include "#include <...> (include)"
#include <${1:some_header}> $0
endsnippet

snippet for "for int loop (for)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
  ${VISUAL}$0
}
endsnippet

snippet if "if condition (if)"
if (${1:/* condition */}) {
  ${0:${VISUAL}}
}
endsnippet

snippet elif "else if .. (eli)"
else if (${1:/* condition */}) {
  ${VISUAL}$0
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
  import random, string
  snip.rv =  re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
else:
  snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif  // $1
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# vim:ft=snippets:
